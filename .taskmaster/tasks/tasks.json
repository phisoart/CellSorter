{
  "tasks": [
    {
      "id": "TASK-001",
      "title": "Implement Image Loading Module",
      "description": "Create the image handler module to load and display TIFF, JPG, JPEG, and PNG files",
      "type": "feature",
      "priority": "high",
      "status": "completed",
      "effort": "medium",
      "dependencies": [],
      "acceptance_criteria": [
        "Support TIFF, JPG, JPEG, PNG formats",
        "Handle images >50MB efficiently",
        "Display image in scrollable widget",
        "Implement zoom/pan functionality",
        "Show loading progress for large files"
      ],
      "technical_notes": "Use OpenCV for image loading, QGraphicsView for display"
    },
    {
      "id": "TASK-002",
      "title": "Create CSV Parser Module",
      "description": "Implement CellProfiler CSV parsing with validation",
      "type": "feature",
      "priority": "high",
      "status": "completed",
      "effort": "medium",
      "dependencies": [],
      "acceptance_criteria": [
        "Parse CellProfiler CSV format",
        "Validate required bounding box columns",
        "Extract cell coordinates and features",
        "Handle missing/invalid data gracefully",
        "Provide clear error messages"
      ],
      "technical_notes": "Use pandas for CSV processing, implement robust error handling"
    },
    {
      "id": "TASK-003",
      "title": "Build Scatter Plot Widget",
      "description": "Create interactive scatter plot visualization using matplotlib",
      "type": "feature",
      "priority": "high",
      "status": "todo",
      "effort": "large",
      "dependencies": ["TASK-002"],
      "acceptance_criteria": [
        "Embed matplotlib in Qt widget",
        "Allow column selection for X/Y axes",
        "Implement rectangle selection tool",
        "Support shift+drag for selection",
        "Real-time highlighting of selected points"
      ],
      "technical_notes": "Use matplotlib backend for Qt, implement custom selection handler"
    },
    {
      "id": "TASK-004",
      "title": "Develop Selection Manager",
      "description": "Create system for managing cell selections with colors and labels",
      "type": "feature",
      "priority": "medium",
      "status": "todo",
      "effort": "medium",
      "dependencies": ["TASK-003"],
      "acceptance_criteria": [
        "Track multiple selections",
        "Assign colors from palette",
        "Support custom labels",
        "Map to 96-well plate positions",
        "Provide selection summary table"
      ],
      "technical_notes": "Implement as model class with Qt signals for updates"
    },
    {
      "id": "TASK-005",
      "title": "Implement Coordinate Calibration",
      "description": "Build two-point calibration system for coordinate transformation",
      "type": "feature",
      "priority": "high",
      "status": "todo",
      "effort": "large",
      "dependencies": ["TASK-001"],
      "acceptance_criteria": [
        "Capture two reference points on image",
        "Input corresponding stage coordinates",
        "Calculate affine transformation",
        "Validate transformation accuracy",
        "Show calibration status"
      ],
      "technical_notes": "Use NumPy for matrix calculations, implement validation checks"
    },
    {
      "id": "TASK-006",
      "title": "Create Protocol Exporter",
      "description": "Generate .cxprotocol files for CosmoSort hardware",
      "type": "feature",
      "priority": "high",
      "status": "todo",
      "effort": "medium",
      "dependencies": ["TASK-004", "TASK-005"],
      "acceptance_criteria": [
        "Generate INI-style protocol files",
        "Include transformed coordinates",
        "Add selection metadata",
        "Validate output format",
        "Support batch export"
      ],
      "technical_notes": "Use configparser for INI generation, implement format validation"
    },
    {
      "id": "TASK-007",
      "title": "Design Main Application Window",
      "description": "Create the main window with menu, toolbar, and layout",
      "type": "feature",
      "priority": "high",
      "status": "completed",
      "effort": "medium",
      "dependencies": [],
      "acceptance_criteria": [
        "Implement menu bar with standard actions",
        "Create toolbar for common operations",
        "Design responsive layout",
        "Add status bar for feedback",
        "Support dock widgets for panels"
      ],
      "technical_notes": "Use QMainWindow, implement proper layout management"
    },
    {
      "id": "TASK-008",
      "title": "Add Session Management",
      "description": "Implement save/load functionality for analysis sessions",
      "type": "feature",
      "priority": "medium",
      "status": "todo",
      "effort": "medium",
      "dependencies": ["TASK-004"],
      "acceptance_criteria": [
        "Save session state to JSON",
        "Restore complete session",
        "Include all selections and settings",
        "Support autosave",
        "Handle version compatibility"
      ],
      "technical_notes": "Design extensible session format, implement migration support"
    },
    {
      "id": "TASK-009",
      "title": "Implement Error Handling System",
      "description": "Create comprehensive error handling and user feedback",
      "type": "infrastructure",
      "priority": "high",
      "status": "completed",
      "effort": "medium",
      "dependencies": [],
      "acceptance_criteria": [
        "Catch and handle all exceptions",
        "Show user-friendly error dialogs",
        "Log errors for debugging",
        "Implement recovery options",
        "Prevent data loss on errors"
      ],
      "technical_notes": "Use logging module, create custom exception classes"
    },
    {
      "id": "TASK-010",
      "title": "Create Comprehensive Test Suite",
      "description": "Develop unit and integration tests for all modules",
      "type": "testing",
      "priority": "high",
      "status": "completed",
      "effort": "large",
      "dependencies": [],
      "acceptance_criteria": [
        "Achieve 85% code coverage",
        "Test all core functions",
        "Include GUI component tests",
        "Add integration test workflows",
        "Implement performance benchmarks"
      ],
      "technical_notes": "Use pytest and pytest-qt, follow TDD principles"
    },
    {
      "id": "TASK-011",
      "title": "Apply Material Design Theme",
      "description": "Integrate qt-material for modern UI appearance",
      "type": "ui",
      "priority": "medium",
      "status": "todo",
      "effort": "small",
      "dependencies": ["TASK-007"],
      "acceptance_criteria": [
        "Apply qt-material theme",
        "Support light/dark modes",
        "Ensure consistent styling",
        "Maintain accessibility",
        "Test on all platforms"
      ],
      "technical_notes": "Use qt-material package, create custom style overrides"
    },
    {
      "id": "TASK-012",
      "title": "Add Keyboard Shortcuts",
      "description": "Implement keyboard shortcuts for common operations",
      "type": "feature",
      "priority": "low",
      "status": "todo",
      "effort": "small",
      "dependencies": ["TASK-007"],
      "acceptance_criteria": [
        "Define standard shortcuts",
        "Implement action system",
        "Show shortcuts in menus",
        "Support customization",
        "Document all shortcuts"
      ],
      "technical_notes": "Use QAction and QShortcut, follow platform conventions"
    }
  ],
  "metadata": {
    "total_tasks": 12,
    "by_status": {
      "todo": 7,
      "in_progress": 0,
      "completed": 5
    },
    "by_priority": {
      "high": 7,
      "medium": 4,
      "low": 1
    },
    "by_type": {
      "feature": 9,
      "infrastructure": 1,
      "testing": 1,
      "ui": 1
    }
  }
}