---
description: 
globs: 
alwaysApply: false
---
# Project Update Rules for CellSorter

## Mandatory Headless Development Rules

### CRITICAL: All development MUST be done in headless mode
- **NEVER show GUI during development unless explicitly specified**
- **ALL UI operations MUST work without display server**
- **Use `--headless` flag or virtual display (Xvfb) for any GUI testing**
- **Every test MUST include comprehensive UI interaction simulation**

### Interactive Testing Requirements
- **MUST test ALL clicks, drags, keyboard inputs in terminal/headless mode**
- **MUST simulate complete user workflows without display**
- **Run `pytest tests/ --headless --interactive-sim` before any updates**

## Project Structure Update Rules

### When updating project structure files

When this rule is triggered, you MUST update the `docs\PROJECT_STRUCTURE.md` file with the following exact format:

```
# CellSorter Project Structure

## File Organization

```
├── PRODUCT_REQUIREMENTS.md          # 제품 요구사항 명세서 ('무엇'과 '왜')
├── README.md                        # 프로젝트 개요, 실행 방법, 설치 등
├── ARCHITECTURE.md                 # 전체 기술 아키텍처 및 기술 스택 설명
├── CODING_STYLE_GUIDE.md           # 네이밍 규칙, 디렉토리 구조, 문서화 규칙 등
├── TESTING_STRATEGY.md             # 단위/통합 테스트 계획, 도구, 커버리지 기준
├── CONTRIBUTING.md                 # 개발 참여자를 위한 워크플로우와 협업 가이드
├── .cursor-rules                   # Cursor AI를 위한 명확한 행동 지침 정의
│
├── package.json                    # (선택) 의존성 관리용 (Python이면 requirements.txt)
├── requirements.txt                # Python 라이브러리 명세
│
├── /docs/
│   ├── /design/
│   │   ├── DESIGN_SPEC.md          # 전체 UI 흐름, 페이지별 인터랙션 정의
│   │   ├── DESIGN_SYSTEM.md        # 버튼, 입력창 등 UI 컴포넌트 정의 및 속성
│   │   ├── assets/                 # 디자인에 쓰이는 이미지, 예시 mockup
│   │   └── style.css               # 주요 스타일 정의 파일 (디자인 시스템 기반)
│   │
│   ├── USER_PERSONAS.md            # 주요 사용자 유형 정의 (페르소나)
│   ├── USER_SCENARIOS.md           # 페르소나 기반 시나리오 (예: "이미지를 자르고 저장")
│   └── RELEASE_PLAN.md             # 기능 릴리즈 일정 및 배포 방법 정리
│
├── /src/                           # PySide6 애플리케이션 코드
│   ├── /components/                # 재사용 가능한 UI 컴포넌트
│   │   ├── __init__.py
│   │   ├── /base/                  # 기본 컴포넌트 클래스
│   │   ├── /dialogs/               # 커스텀 다이얼로그
│   │   └── /widgets/               # 커스텀 위젯
│   ├── /pages/                     # 메인 애플리케이션 페이지/화면
│   ├── /models/                    # 데이터 모델 및 비즈니스 로직
│   ├── /utils/                     # 유틸리티 함수 및 헬퍼
│   ├── /config/                    # 설정 파일
│   ├── /assets/                    # 아이콘, 이미지 등 정적 파일
│   └── main.py                     # 애플리케이션 진입점
│
└── /tests/                         # 단위 및 통합 테스트 코드
    ├── /components/                # 컴포넌트 테스트
    ├── /pages/                     # 페이지 테스트
    ├── /models/                    # 모델 테스트
    └── /utils/                     # 유틸리티 테스트
```

## Directory Descriptions

### Root Level Files
- **PRODUCT_REQUIREMENTS.md**: 제품의 기능 요구사항과 비즈니스 목표
- **README.md**: 프로젝트 설치, 실행, 사용법 가이드
- **ARCHITECTURE.md**: 기술 스택, 시스템 아키텍처, 설계 결정사항
- **CODING_STYLE_GUIDE.md**: 코딩 컨벤션, 네이밍 규칙, 문서화 규칙
- **TESTING_STRATEGY.md**: 테스트 전략, 도구, 커버리지 기준
- **CONTRIBUTING.md**: 기여자를 위한 개발 워크플로우

### Configuration Files
- **requirements.txt**: Python 의존성 라이브러리 명세
- **package.json**: Node.js 의존성 (선택사항)

### Documentation (/docs/)
- **design/**: UI/UX 설계 관련 문서
- **USER_PERSONAS.md**: 타겟 사용자 정의
- **USER_SCENARIOS.md**: 사용자 시나리오 및 워크플로우
- **RELEASE_PLAN.md**: 릴리즈 계획 및 배포 전략

### Source Code (/src/)
- **components/**: 재사용 가능한 UI 컴포넌트
- **pages/**: 메인 애플리케이션 화면
- **models/**: 데이터 모델 및 비즈니스 로직
- **utils/**: 공통 유틸리티 함수
- **config/**: 애플리케이션 설정
- **assets/**: 정적 리소스 파일

### Tests (/tests/)
- 소스 코드 구조를 미러링하는 테스트 파일들
```

## Conda Environment and Requirements.txt Update Rules

### Conda Environment Activation
When working on the CellSorter project, you MUST:

1. **Always activate the cellsorter conda environment** before performing any Python-related tasks:
   ```bash
   . ~/.bash_profile
   conda activate cellsorter
   ```

2. **Verify the environment is active** by checking the environment name in the prompt or running:
   ```bash
   conda info --envs
   ```

### Requirements.txt Management

#### When to update requirements.txt
You MUST update the `requirements.txt` file whenever:

1. **New Python packages are installed** via conda or pip
2. **Package versions are upgraded or downgraded**
3. **Packages are removed from the environment**
4. **Development setup changes**
5. **Before committing any code changes**

#### Requirements.txt Update Process

1. **Activate the cellsorter environment**:
   ```bash
   conda activate cellsorter
   ```

2. **Generate requirements from conda environment**:
   ```bash
   pip freeze > requirements.txt
   ```

3. **Alternative method using conda list**:
   ```bash
   conda list --export > environment.yml
   # Then convert to requirements.txt format if needed
   ```

4. **Clean up the requirements.txt file**:
   - Remove system-specific paths
   - Remove unnecessary build numbers
   - Keep only essential packages
   - Use compatible version specifiers (>=, ==, ~=)

#### Requirements.txt Format Standards

The requirements.txt file MUST follow these standards:

```txt
# Core PySide6 Framework
PySide6>=6.4.0

# Image Processing
opencv-python>=4.8.0
numpy>=1.24.0
Pillow>=10.0.0

# Data Analysis
pandas>=2.0.0
matplotlib>=3.7.0

# Testing Framework
pytest>=7.4.0
pytest-qt>=4.2.0

# Development Tools
black>=23.0.0
flake8>=6.0.0
mypy>=1.5.0

# Build Tools
pyinstaller>=5.13.0
```

#### Package Installation Priority

1. **First priority**: Install via conda when available
   ```bash
   conda install package_name
   ```

2. **Second priority**: Install via pip when not available in conda
   ```bash
   pip install package_name
   ```

3. **Always update requirements.txt** after any installation
   ```bash
   pip freeze > requirements.txt
   ```

#### Environment Synchronization

When other developers join the project:

1. **Create the environment**:
   ```bash
   conda create --name cellsorter python=3.11
   ```

2. **Activate the environment**:
   ```bash
   conda activate cellsorter
   ```

3. **Install from requirements.txt**:
   ```bash
   pip install -r requirements.txt
   ```

#### Pre-commit Requirements Check

Before any git commit, you MUST:

1. **Activate cellsorter environment**
2. **Update requirements.txt if packages changed**
3. **Verify requirements.txt is current**:
   ```bash
   pip check
   pip freeze > temp_requirements.txt
   diff requirements.txt temp_requirements.txt
   rm temp_requirements.txt
   ```

#### Development vs Production Requirements

Maintain separate requirements if needed:

- **requirements.txt**: Production dependencies only
- **requirements-dev.txt**: Development and testing dependencies
- **requirements-build.txt**: Build and deployment dependencies

#### Conda Environment Backup

Regularly backup the conda environment:

```bash
conda env export --name cellsorter > environment.yml
```

This creates a complete environment specification including conda packages.

### Automated Requirements Update

When this rule is triggered, automatically:

1. **Check if cellsorter environment exists**
2. **Activate the environment**
3. **Generate updated requirements.txt**
4. **Clean and format the file**
5. **Commit changes if requirements differ**

Example automation script reference:
```bash
#!/bin/bash
conda activate cellsorter
if [ $? -eq 0 ]; then
    pip freeze > requirements.txt
    echo "requirements.txt updated successfully"
else
    echo "Error: cellsorter environment not found or activation failed"
    exit 1
fi
```

## README.md Auto-Update Rules

### When to update README.md

You MUST automatically update the README.md file whenever:

1. **New files are added to the project**
2. **Project structure changes**
3. **Dependencies are modified**
4. **Installation steps change**
5. **Usage instructions need updates**

### Update Process

1. **Analyze git diff**: Check what files have been added, modified, or deleted
2. **Review commit messages**: Understand the nature of changes
3. **Update relevant sections**: Modify README.md sections accordingly

### README.md Structure to Maintain

```markdown
# CellSorter

## 📋 Overview
[Brief description of the application]

## 🚀 Features
[List of main features - update when new features are added]

## 🛠️ Technology Stack
[Update when dependencies change]

## 📁 Project Structure
[Update when file structure changes]

## ⚙️ Installation
[Update when setup process changes]

## 🎯 Usage
[Update when usage instructions change]

## 🧪 Testing
[Update when testing setup changes]

## 📖 Documentation
[Update when documentation files are added/modified]

## 🤝 Contributing
[Update based on CONTRIBUTING.md changes]

## 📄 License
[License information]
```

### Specific Update Triggers

#### When new source files are added:
- Update **Project Structure** section
- Update **Features** section if new functionality
- Update **Usage** section if new user-facing features

#### When dependencies change:
- Update **Technology Stack** section
- Update **Installation** section
- Update **Requirements** section

#### When documentation files are added/modified:
- Update **Documentation** section
- Add links to new documentation files
- Update navigation references

#### When test files are added:
- Update **Testing** section
- Update **Installation** section if new test dependencies

#### When configuration files change:
- Update **Installation** section
- Update **Usage** section if configuration affects usage

### Auto-Update Commands

When performing README updates, include these actions:

1. **Check git status**: `git status --porcelain`
2. **Review recent commits**: `git log --oneline -10`
3. **Analyze file changes**: `git diff --name-status HEAD~1`
4. **Update sections accordingly**
5. **Maintain consistency** with other documentation files

### Content Synchronization Rules

- **Always sync** with ARCHITECTURE.md for technology stack
- **Always sync** with CONTRIBUTING.md for contribution guidelines
- **Always sync** with requirements.txt for dependencies
- **Always sync** with project structure for file organization
- **Always reference** relevant documentation files

### Format Requirements

- Use **emoji headers** for better readability
- Include **table of contents** for long READMEs
- Use **code blocks** for installation commands
- Include **screenshots** for UI applications
- Add **badges** for build status, coverage, etc.
- Maintain **consistent formatting** throughout

## Execution Priority

1. **First**: Activate cellsorter conda environment
2. **Second**: Update requirements.txt from conda environment
3. **Third**: Update `docs/design/project_structure.md`
4. **Fourth**: Analyze git changes and commit history
5. **Fifth**: Update README.md based on analysis
6. **Sixth**: Ensure all cross-references are updated
7. **Seventh**: Validate all links and references work correctly

These rules ensure that project documentation stays current and accurate with every change made to the codebase.




