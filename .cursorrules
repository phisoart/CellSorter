# CellSorter Development Rules

## General Guidelines

1. **Cross-Platform Compatibility**
   - Code must work on Windows, macOS, and Linux
   - Use pathlib for file paths
   - Avoid platform-specific features

2. **Test-Driven Development**
   - Write tests first
   - Maintain >80% code coverage
   - All features must have corresponding tests

3. **Code Style**
   - Follow PEP 8
   - Use type hints
   - Document all public APIs

4. **Error Handling**
   - Use custom exceptions
   - Provide meaningful error messages
   - Log errors appropriately

## Headless GUI Development Rules

### Core Principles

1. **Development Mode First**
   - ALWAYS use `--dev-mode` flag when developing
   - NEVER create QApplication in development mode
   - Use YAML/JSON for all UI definitions

2. **Terminal-Only Development**
   - All UI development must be possible via terminal
   - No dependency on GUI designers or visual tools
   - Output must be parseable by both humans and AI

3. **Bidirectional Synchronization**
   - Changes in code MUST reflect in UI definitions
   - Changes in UI definitions MUST reflect in code
   - Round-trip editing must preserve all properties

### Mandatory Practices

1. **Mode Detection**
   ```python
   # Always check mode before GUI operations
   if is_dev_mode():
       # Work with UI definitions
       ui_manager = HeadlessUIManager()
   else:
       # Normal GUI instantiation
       app = QApplication(sys.argv)
   ```

2. **UI Definition Structure**
   - All UI definitions MUST have version field
   - All widgets MUST have unique names
   - All names MUST be valid Python identifiers
   - Use camelCase for widget names

3. **File Organization**
   ```
   ui_definitions/
   ├── main_window.yaml
   ├── dialogs/
   │   ├── export_dialog.yaml
   │   └── calibration_dialog.yaml
   └── components/
       ├── scatter_plot.yaml
       └── selection_panel.yaml
   ```

4. **Testing Requirements**
   - All UI definitions must be validated
   - Tests must work without display
   - Use headless mode for CI/CD

### Development Workflow

1. **Start Development**
   ```bash
   export CELLSORTER_DEV_MODE=true
   python run.py --dev-mode
   ```

2. **Modify UI**
   ```bash
   # Dump current UI
   python run.py dump-ui > ui_definition.yaml
   
   # Edit UI definition
   # ... make changes ...
   
   # Validate changes
   python run.py validate-ui ui_definition.yaml
   
   # Load changes
   python run.py load-ui ui_definition.yaml
   ```

3. **Test Changes**
   ```bash
   # Run headless tests
   pytest tests/headless/
   
   # Test with display (if available)
   CELLSORTER_DEV_MODE=false python run.py
   ```

### AI Agent Guidelines

1. **Commands for AI**
   - Use structured commands
   - Provide clear feedback
   - Validate all modifications
   - Create backups before changes

2. **Modification Pattern**
   ```yaml
   # Document changes
   widgets:
     - type: QPushButton
       name: newButton
       _meta:
         added_by: "AI Agent"
         date: "2024-01-01"
         reason: "User request"
   ```

3. **Error Recovery**
   - Always provide fallback options
   - Log all operations
   - Enable rollback capability

### Security Rules

1. **Input Validation**
   - Validate all widget types
   - Check property values
   - Prevent code injection

2. **Safe Parsing**
   ```python
   # Always use safe loaders
   ui_def = yaml.safe_load(text)  # ✓
   # ui_def = eval(text)  # ✗ NEVER
   ```

### Performance Guidelines

1. **Lazy Loading**
   - Load UI components on demand
   - Cache parsed definitions
   - Minimize memory usage

2. **Efficient Updates**
   - Update only changed widgets
   - Batch property changes
   - Avoid full UI rebuilds

## Version Control

1. **Commit Messages**
   - Use conventional commits
   - Reference task numbers
   - Include validation status

2. **UI Definition Changes**
   ```bash
   git add ui_definitions/
   git commit -m "feat(ui): Add export toolbar
   
   - Added toolbar definition
   - Validated in headless mode
   - Tests updated"
   ```

## Debugging

1. **Enable Debug Mode**
   ```bash
   export CELLSORTER_DEBUG=true
   export CELLSORTER_UI_TRACE=true
   ```

2. **Validation Output**
   ```bash
   python run.py validate-ui --verbose ui_definition.yaml
   ```

## Forbidden Practices

NEVER:
- Create QApplication in dev mode
- Use eval() on UI definitions
- Hardcode absolute paths
- Skip validation
- Ignore test failures
- Assume display availability
- Use undocumented properties
- Break backward compatibility

## Success Criteria

Every development session must:
- ✅ Pass validation
- ✅ Work in headless mode
- ✅ Maintain UI consistency
- ✅ Update documentation
- ✅ Pass all tests
- ✅ Be reviewable in text format 